# 对于添加到负载均衡实例后端的ECS，原则上不需要进行特别的配置。如果针对关联到负载均衡4层（TCP协议）服务的Linux系统的ECS，如果发现无法正常访问，需要确保系统配置文件/etc/sysctl.conf的以下三项为0：
net.ipv4.conf.default.rp_filter = 0
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.eth0.rp_filter = 0
# 如果部署在同一内网网段下的ECS之间有通信需求，且发现有无法通信的情况存在，那么需要检查如下参数的配置是否正确：
net.ipv4.conf.default.arp_announce =2
net.ipv4.conf.all.arp_announce =2


# see details in https://help.aliyun.com/knowledge_detail/41334.html
net.ipv4.tcp_synack_retries = 2
kernel.sysrq = 1
vm.max_map_count = 655360
kernel.pid_max = 400000
net.core.somaxconn = 65535

fs.file-max = 52706963
fs.nr_open = 52706963
# 表示每一个real user ID可创建的inotify instatnces的数量上限，默认128
fs.inotify.max_user_instances = 8192
# 表示同一用户同时可以添加的watch数目
fs.inotify.max_user_watches = 1048576

# 允许将TIME-WAIT的socket重新用于新的TCP连接。如果新请求的时间戳，比存储的时间戳更大，则系统将会从TIME_WAIT状态的存活连接中选取一个，重新分配给新的请求连接。
net.ipv4.tcp_tw_reuse = 1
# 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭 4.2.2内核以下使用
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_timestamps = 0
# 在HTTP服务中，Server由于某种原因会主动关闭连接，例如KEEPALIVE超时的情况下。作为主动关闭连接的Server就会进入FIN_WAIT2状态 
# 在TCP/IP协议栈中，存在半连接的概念，FIN_WAIT2状态不算超时，如果Client不关闭，FIN_WAIT2状态将保持到系统重启，越来越多的FIN_WAIT2状态会致使内核Crash。
# 修改系統默认的TIMEOUT时间
net.ipv4.tcp_fin_timeout = 30
# 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭
net.ipv4.tcp_syncookies = 1

# 现象system日志 kernel: nf_conntrack: table full, dropping packet.
# ip_conntrack是Linux系统内NAT的一个跟踪连接条目的模块。ip_conntrack模块会使用一个哈希表记录TCP协议“established connection”记录，当这个哈希表满之后，便会导致“nf_conntrack: table full, dropping packet”错误。Linux系统会开辟一个空间，用于维护每一个TCP链接，这个空间的大小与nf_conntrack_buckets、nf_conntrack_max参数相关，后者的默认值是前者的4倍，所以一般建议调大nf_conntrack_max参数值。
# 超时


#接收套接字缓冲区大小的默认值(以字节为单位)。
net.core.wmem_default = 8388608
#接收套接字缓冲区大小的最大值(以字节为单位)。
net.core.rmem_max = 16777216
#发送套接字缓冲区大小的默认值(以字节为单位)。
net.core.wmem_default = 8388608
#发送套接字缓冲区大小的最大值(以字节为单位)。
net.core.wmem_max = 16777216

# 当内核处理速度比网卡接收速度慢时，这部分多出来的包就会被保存在网卡的接收队列上，而该参数说明了这个队列的数量上限。在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。
net.core.netdev_max_backlog = 262144

#表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。
net.ipv4.tcp_keepalive_time = 1200
net.ipv4.ip_local_port_range = 1024 65535

# 该参数决定了系统中处于SYN_RECV状态的TCP连接数量。SYN_RECV状态指的是当系统收到SYN后，作为SYN+ACK响应后等待对方回复三次握手阶段中的最后一个ACK的阶段。对于还未获得对方确认的连接请求，可保存在队列中的最大数目。如果服务器经常出现过载，可以尝试增加这个数字。默认值大小会受实例内存的影响，默认值最大为2048。
#表示SYN队列的长度，默认为1024，加大队列长度为262144，可以容纳更多等待连接的网络连接数。
net.ipv4.tcp_max_syn_backlog = 262144
#表示系统同时保持TIME_WAIT的最大数量，如果超过这个数字，TIME_WAIT将立刻被清除并打印警告信息。默认为180000，改为5000。此项参数可以控制TIME_WAIT的最大数量，只要超出了
net.ipv4.tcp_max_tw_buckets = 262144


#net.ipv4.tcp_timestsmps = 0	#时间戳可以避免序列号的卷绕。一个1Gbps的链路肯定会遇到以前用过的序列号。时间戳能够让内核接受这种“异常”的数据包。这里需要将其关掉。

# 确定TCP栈应该如何反映内存使用，每个值的单位都是内存页（通常是4KB）。
# 第一个值是内存使用的下限。
# 第二个值是内存压力模式开始对缓冲区使用应用压力的上限。
# 第三个值是内存使用的上限。在这个层次上可以将报文丢弃，从而减少对内存的使用。对于较大的BDP可以增大这些值（其单位是内存页而不是字节）
net.ipv4.tcp_mem = 94500000 915000000 927000000
# 为自动调优定义Socket使用的内存。
# 第一个值是为Socket接收缓冲区分配的最少字节数。
# 第二个值是默认值（该值会被rmem_default覆盖），缓冲区在系统负载不重的情况下可以增长到这个值。
# 第三个值是接收缓冲区空间的最大字节数（该值会被rmem_max覆盖）。
net.ipv4.tcp_rmem = 4096 87380 16777216 
# 为自动调优定义Socket使用的内存。
# 第一个值是为Socket发送缓冲区分配的最少字节数。
# 第二个值是默认值（该值会被wmem_default覆盖），缓冲区在系统负载不重的情况下可以增长到这个值。
# 第三个值是发送缓冲区空间的最大字节数（该值会被wmem_max覆盖）。
net.ipv4.tcp_wmem = 4096 87380 16777216 

# TCP发送keepalive探测消息的间隔时间（秒），用于确认TCP连接是否有效。
# 探测消息未获得响应时，重发该消息的间隔时间（秒）。
# 在认定TCP连接失效之前，最多发送多少个keepalive探测消息。
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_keepalive_intvl = 30
net.ipv4.tcp_keepalive_probes = 9


# 接口间转发报文
net.ipv4.ip_forward = 1
# 关闭IPV6
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1

vm.swappiness = 0
vm.overcommit_memory = 1
vm.panic_on_oom = 0

vm.max_map_count = 655360

